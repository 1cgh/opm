#Использовать logos

Перем ДополнительныеРепо;
Перем Лог;
Перем ПакетыХаба;

Функция ПрочитатьФайлСпискаПакетов(ПакетыХаба, Текст, Репо)
	ТекстовыйДокумент  = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	КоличествоПакетовВХабе = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоПакетовВХабе Цикл
		ИмяПакета = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки));
		Если ПакетыХаба[ИмяПакета] = Неопределено Тогда
			ПакетыХаба.Вставить(ИмяПакета, Новый Массив);
		КонецЕсли;
		ПакетыХаба[ИмяПакета].Добавить(Репо);
	КонецЦикла;
КонецФункции

Функция ПолучитьСписокПакетов(Репозиторий, Ресурс)

	Ответ = Репозиторий.ПолучитьРесурс(Ресурс);
	
	Если Ответ = Неопределено Или Ответ.КодСостояния <> 200 Тогда
		ТекстИсключения = СтрШаблон("Ошибка подключения к зеркалу ");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	Ответ.Закрыть();

	Возврат ТекстОтвета;

КонецФункции

Функция ПолучитьПакеты() Экспорт

	ПакетыХаба = Новый Соответствие;

	ТекстОтвета = "";
	Попытка
		ТекстОтвета = ПолучитьСписокПакетов(Зеркала, "list.txt");
	Исключение
		Лог.Предупреждение(
			СтрШаблон("Ошбика получения списка пакетов с хаба %1 по причине %2", 
			"default", ОписаниеОшибки()
			)
		);
	КонецПопытки;

	ПрочитатьФайлСпискаПакетов(ПакетыХаба, ТекстОтвета, "default");
	Для Каждого Репо из ДополнительныеРепо Цикл
		ТекстОтвета = "";
		Попытка
			ТекстОтвета = ПолучитьСписокПакетов(Репо.Значение, "list.txt");
		Исключение
			Лог.Предупреждение(
				СтрШаблон("Ошбика получения списка пакетов с хаба %1 по причине %2", 
				Репо.Ключ, ОписаниеОшибки()
				)
			);
		КонецПопытки;
		ПрочитатьФайлСпискаПакетов(ПакетыХаба, ТекстОтвета, Репо.Ключ);
	КонецЦикла;
	
	Возврат ПакетыХаба;

КонецФункции

// ИмяРесурса - имя файла относительно "Сервер/ПутьВХранилище"
// Возвращает HttpОтвет или Неопределено, если ни один сервер не вернул ответ.
Функция ПолучитьРесурс(Знач ИмяРесурса) Экспорт

	РесурсУспешноПолучен = Ложь;

	Если ДополнительныеРепо = Неопределено Тогда
		Инициализация();
	КонецЕсли;

	СерверУдаленногоХранилища = "";
	Ответ = Зеркала.ПолучитьРесурс(ИмяРесурса);
	Если Ответ = Неопределено ИЛИ Ответ.КодСостояния <> 200 Тогда
		Для каждого Репо из ДополнительныеРепо Цикл
			Ответ = Репо.Значение.ПолучитьРесурс(ИмяРесурса);

			Если Ответ = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если Ответ.КодСостояния = 200 Тогда
				РесурсУспешноПолучен = Истина;
				СерверУдаленногоХранилища = Репо.Значение.СерверУдаленногоХранилища;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	Иначе
		СерверУдаленногоХранилища = Зеркала.ПодключенноеЗеркало.СерверУдаленногоХранилища;
		РесурсУспешноПолучен = Истина;
	КонецЕсли;

	Если РесурсУспешноПолучен Тогда
		
		ТекстСообщения = СтрШаблон("Ресурс %1 успешно получен с %2", ИмяРесурса, СерверУдаленногоХранилища);
		Лог.Отладка(ТекстСообщения);

		Возврат Ответ;
	
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура Добавить(Знач Зеркало) Экспорт
	Зеркала.Добавить(Зеркало);
КонецПроцедуры

Процедура Инициализация()

	Лог = Логирование.ПолучитьЛог("oscript.app.opm");
	ДополнительныеРепо = Новый Соответствие;
	НастройкиПриложения = НастройкиПриложенияOpm.Получить();
	
	Если НЕ НастройкиПриложения.Свойство("СервераПакетов") Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеРепоНастройки = НастройкиПриложения["СервераПакетов"];
	Если ТипЗнч(ДополнительныеРепоНастройки) <> Тип("Массив") Тогда
		Лог.Предупреждение(
			"Установленна настройка СервераПакетов, но не массив, а "
			+ТипЗнч(ДополнительныеРепоНастройки));
		Возврат;
	КонецЕсли;

	Для каждого Репо из ДополнительныеРепоНастройки Цикл
		
		РепоЗеркало = Новый("Зеркало");
		Попытка
			РепоЗеркало.СерверУдаленногоХранилища = Репо.Сервер;
			РепоЗеркало.ПутьВХранилище = ?(Репо.Свойство("ПутьНаСервере"), Репо.ПутьНаСервере, "/");
			РепоЗеркало.Порт = ?(Репо.Свойство("Порт"), Репо.Порт, 80);
			ДополнительныеРепо.Вставить(Репо.Имя, РепоЗеркало);
		Исключение
			Лог.Ошибка("Ошибка чтение настройки репо " + Репо.Ключ + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Инициализация();