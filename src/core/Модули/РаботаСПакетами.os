#Использовать fluent
#Использовать fs
#Использовать logos
#Использовать tempfiles

Перем Лог;
Перем ПакетыХаба;

Процедура Инициализация()
	
	// ОбновитьПакетыХаба();


КонецПроцедуры

Процедура ОбновитьУстановленныеПакеты(Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	КэшУстановленныхПакетов = ПолучитьУстановленныеПакеты(РежимУстановки);
	УстановленныеПакеты = КэшУстановленныхПакетов.ПолучитьУстановленныеПакеты();
	Для Каждого КлючИЗначение Из УстановленныеПакеты Цикл
		ИмяПакета = КлючИЗначение.Ключ;
		ИмяАрхива = ОпределитьИмяАрхива(ИмяПакета);
		Если ИмяАрхива = Неопределено Тогда
			ТекстИсключения = СтрШаблон("Ошибка обновления пакета %1: Пакет не найден в хабе", ИмяПакета);
			Лог.Предупреждение(ТекстИсключения);
			Продолжить;
		КонецЕсли;

		ОбновитьПакетИзОблака(ИмяПакета, РежимУстановки, ЦелевойКаталог);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьУстановленныеПакеты(РежимУстановки)
	
	КаталогУстановкиЗависимостей = ОбъединитьПути(КаталогПрограммы(), ПолучитьЗначениеСистемнойНастройки("lib.system"));

	Если РежимУстановки = РежимУстановкиПакетов.Локально Тогда
		КаталогУстановкиЗависимостей = ОбъединитьПути(
			ТекущийКаталог(),
			КонстантыOpm.ЛокальныйКаталогУстановкиПакетов
		);
	КонецЕсли;

	КэшУстановленныхПакетов = Новый КэшУстановленныхПакетов(КаталогУстановкиЗависимостей);

	Возврат КэшУстановленныхПакетов;

КонецФункции

Процедура УстановитьПакетИзОблака(Знач ИмяПакета, Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	ИмяВерсияПакета = РаботаСВерсиями.РазобратьИмяПакета(ИмяПакета);
	ЭтоЗависимость = Ложь;
	Если РежимУстановки = РежимУстановкиПакетов.Локально Тогда
		ЭтоЗависимость = Истина;
	КонеЦесли;
	УстановкаПакета = Новый МенеджерУстановкиПакетов(РежимУстановки, ЦелевойКаталог);

	УстановкаПакета.УстановитьПакетПоИмениИВерсии(ИмяВерсияПакета.ИмяПакета, ИмяВерсияПакета.Версия, ЭтоЗависимость);
	
КонецПроцедуры

Процедура УстановитьПакетИзФайла(Знач ИмяФайлаПакета, Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	УстановкаПакета = Новый МенеджерУстановкиПакетов(РежимУстановки, ЦелевойКаталог);

	УстановкаПакета.УстановитьПакетИзАрхива(ИмяФайлаПакета);
	
КонецПроцедуры


Процедура ПроверитьВерсиюСреды(Манифест)
	
	Свойства = Манифест.Свойства();
	Если НЕ Свойства.Свойство("ВерсияСреды") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПакета = Свойства.Имя;
	ТребуемаяВерсияСреды = Свойства.ВерсияСреды;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияСреды = СистемнаяИнформация.Версия;
	Лог.Отладка("ПроверитьВерсиюСреды: Перед вызовом СравнитьВерсии(ЭтаВерсия = <%1>, БольшеЧемВерсия = <%2>)", ТребуемаяВерсияСреды, ВерсияСреды);
	Если РаботаСВерсиями.СравнитьВерсии(ТребуемаяВерсияСреды, ВерсияСреды) > 0 Тогда
			ТекстСообщения = СтрШаблон(
			"Ошибка установки пакета <%1>: Обнаружена устаревшая версия движка OneScript.
			|Требуемая версия: %2
			|Текущая версия: %3
			|Обновите OneScript перед установкой пакета", 
			ИмяПакета,
			ТребуемаяВерсияСреды,
			ВерсияСреды
		);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецПроцедуры


Процедура УстановитьВсеПакетыИзОблака(Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	КэшПакетовХаба = Новый КэшПакетовХаба();
	ПакетыХаба = КэшПакетовХаба.ПолучитьПакетыХаба();
	Для Каждого КлючИЗначение Из ПакетыХаба Цикл
		УстановитьПакетИзОблака(КлючИЗначение.Ключ, РежимУстановки, ЦелевойКаталог);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПакетИзОблака(Знач ИмяПакета, Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	УстановитьПакетИзОблака(ИмяПакета, РежимУстановки, ЦелевойКаталог);

КонецПроцедуры


Процедура УстановитьПакетыПоОписаниюПакета(Знач РежимУстановки, Знач ЦелевойКаталог) Экспорт
	
	ОписаниеПакета = РаботаСОписаниемПакета.ПрочитатьОписаниеПакета();
	
	ПроверитьВерсиюСреды(ОписаниеПакета);
	
	УстановкаПакета = Новый МенеджерУстановкиПакетов(РежимУстановки);

	УстановкаПакета.РазрешитьЗависимостиПакета(ОписаниеПакета);

	Если РежимУстановки = РежимУстановкиПакетов.Локально Тогда
		ОбеспечитьФайлыИнфраструктурыЛокальнойУстановки(ОписаниеПакета, РежимУстановки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонфигурационныеФайлыОСкрипт(Знач КаталогУстановки, Знач ОписаниеПакета, Знач РежимУстановки) Экспорт
	
	Если РежимУстановки <> РежимУстановкиПакетов.Локально Тогда
		Возврат;
	КонецЕсли;

	ИмяПакета = ОписаниеПакета.Свойства().Имя;
	
	КаталогиИсполняемыхФайлов = ПроцессорыКоллекций.ИзКоллекции(ОписаниеПакета.ИсполняемыеФайлы())
		.Обработать("Результат = Новый Файл(ОбъединитьПути(ДополнительныеПараметры.КаталогУстановки, Элемент.Путь)).Путь", Новый Структура("КаталогУстановки", КаталогУстановки))
		.Различные()
		.ВМассив();

	ШаблонТекстаКонфигурационногоФайла = "lib.additional=%1";

	Для Каждого КаталогИсполняемогоФайла Из КаталогиИсполняемыхФайлов Цикл
		
		РазделительПути = "/";
		РазницаВКаталогах = ФС.ОтносительныйПуть(КаталогУстановки, КаталогИсполняемогоФайла, РазделительПути);
		Директории = СтрРазделить(РазницаВКаталогах, РазделительПути);

		ПутьКЛокальнымБиблиотекам = ПроцессорыКоллекций.ИзКоллекции(Директории)
			.Обработать("Результат = ""../""")
			.Сократить("Результат = Результат + Элемент", "");

		ПутьКЛокальнымБиблиотекам = ПутьКЛокальнымБиблиотекам + КонстантыOpm.ЛокальныйКаталогУстановкиПакетов;

		ТекстКонфигурационногоФайла = СтрШаблон(ШаблонТекстаКонфигурационногоФайла, ПутьКЛокальнымБиблиотекам);
		ПутьККонфигурационномуФайлу = ОбъединитьПути(КаталогИсполняемогоФайла, "oscript.cfg");

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстКонфигурационногоФайла);
		ТекстовыйДокумент.Записать(ПутьККонфигурационномуФайлу, КодировкаТекста.UTF8NoBOM);

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбеспечитьФайлыИнфраструктурыЛокальнойУстановки(Знач ОписаниеПакета, Знач РежимУстановки)

	КаталогНазначения = КонстантыOpm.ЛокальныйКаталогУстановкиПакетов;
	КаталогЗагрузчика = ПолучитьКаталогСистемныхБиблиотек();

	ФС.ОбеспечитьКаталог(КаталогНазначения);
	СоздатьКонфигурационныеФайлыОСкрипт(ТекущийКаталог(), ОписаниеПакета, РежимУстановки);

	ИмяЗагрузчика = "package-loader.os";
	ФайлЗагрузчика = ОбъединитьПути(КаталогЗагрузчика, ИмяЗагрузчика);
	Если Не ФС.ФайлСуществует(ФайлЗагрузчика) Тогда
		Лог.Предупреждение("Не удалось скопировать системный загрузчик в локальный каталог пакетов");
		Возврат;
	КонецЕсли;
	
	ПутьКНовомуЗагрузчику = ОбъединитьПути(КаталогНазначения, ИмяЗагрузчика);
	Если ФС.ФайлСуществует(ПутьКНовомуЗагрузчику) Тогда
		Лог.Отладка("Файл загрузчика уже существует.");
		Возврат;
	КонецЕсли;

	КопироватьФайл(ФайлЗагрузчика, ОбъединитьПути(КаталогНазначения, ИмяЗагрузчика));

КонецПроцедуры

Функция ПолучитьПакет(Знач ИмяПакета, Знач ВерсияПакета, ПутьКФайлуПакета = "") Экспорт
	
	ИмяАрхива = ОпределитьИмяАрхива(ИмяПакета);
	Если ИмяАрхива = Неопределено Тогда
		ТекстИсключения = СтрШаблон("Ошибка установки пакета %1: Пакет не найден", ИмяПакета);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Если ВерсияПакета <> Неопределено Тогда
		ФайлПакета = ИмяАрхива + "-" + ВерсияПакета + ".ospx";
	Иначе
		ФайлПакета = ИмяАрхива + ".ospx";
	КонецЕсли;
	
	Лог.Информация("Скачиваю файл: " + ФайлПакета);
	
	Если ПустаяСтрока(ПутьКФайлуПакета) Тогда
		ПутьКФайлуПакета = ВременныеФайлы.НовоеИмяФайла("ospx");
	КонецЕсли;

	Репо = Новый Репо();
	Ответ  = Репо.ПолучитьРесурс(ИмяАрхива + "/" + ФайлПакета);
	Если Не Ответ = Неопределено Тогда
		Лог.Отладка("Файл получен");
		ВремФайл = ОбъединитьПути(КаталогВременныхФайлов(), ФайлПакета);
		Ответ.ПолучитьТелоКакДвоичныеДанные().Записать(ПутьКФайлуПакета);
		Ответ.Закрыть();
		Лог.Отладка("Соединение закрыто");
	Иначе
		ТекстИсключения = СтрШаблон("Ошибка установки пакета %1: Нет соединения", ИмяПакета);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Возврат ПутьКФайлуПакета;

КонецФункции

// Функция по имени пакета определяет имя архива в хабе
// https://github.com/oscript-library/opm/issues/50
// Имена файлов в хабе регистрозависимы, однако имена пакетов по обыкновению регистронезависимы
Функция ОпределитьИмяАрхива(Знач ИмяПакета)

	Если ПакетыХаба = Неопределено Тогда
		КэшПакетовВХабе = Новый КэшПакетовХаба();
		ПакетыХаба = КэшПакетовВХабе.ПолучитьПакетыХаба(); 		
	КонецЕсли;

	Если ПакетыХаба.Получить(ИмяПакета) = Неопределено Тогда

		Для Каждого мПакет Из ПакетыХаба Цикл

			// Проводим регистронезависимое сравнение имён
			Если нрег(мПакет.Ключ) = нрег(ИмяПакета) Тогда

				// и возвращаем ровно то имя, которое хранится в хабе (с учётом регистра)
				Возврат мПакет.Ключ;

			КонецЕсли;

		КонецЦикла;

		Возврат Неопределено;

	КонецЕсли;

	Возврат ИмяПакета;

КонецФункции

Процедура ОбновитьПакетыХаба()

	КэшПакетовВХабе = Новый КэшПакетовХаба;
	ПакетыХаба = КэшПакетовВХабе.ПолучитьПакетыХаба();

КонецПроцедуры


Функция ПолучитьКаталогСистемныхБиблиотек()
	
	СистемныеБиблиотеки = ОбъединитьПути(КаталогПрограммы(), ПолучитьЗначениеСистемнойНастройки("lib.system"));
	Лог.Отладка("СистемныеБиблиотеки " + СистемныеБиблиотеки);
	Если СистемныеБиблиотеки = Неопределено Тогда
		ВызватьИсключение "Не определен каталог системных библиотек";
	КонецЕсли;
	
	Возврат СистемныеБиблиотеки;
	
КонецФункции

Инициализация();


Лог = Логирование.ПолучитьЛог("oscript.app.opm");
